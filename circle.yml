machine:
  timezone: UTC
  java:
    version: oraclejdk8
  node:
      version: 6.9.5
  python:
      version: 2.7.10

experimental:
  notify:
    branches:
      only:
        - master

dependencies:
  pre:
    - sudo apt-get update
    - sudo apt-get install python-dev
    - sudo pip install --upgrade awscli
    - sudo curl -o /usr/local/bin/ecs-cli https://s3.amazonaws.com/amazon-ecs-cli/ecs-cli-linux-amd64-latest
    - sudo chmod +x /usr/local/bin/ecs-cli
    - ecs-cli --version
    - ulimit -c
    - ulimit -c unlimited -S

# Run these bash commands instead of CircleCI's inferred commands
  override:
    - cd dashbase-grafana && npm install
    - cd dashbase-grafana && ./node_modules/grunt-cli/bin/grunt clean copy
    - cd dashbase-firehose-cloudwatch && mvn compile
    - cd dashbase-firehose-kafka_10 && mvn compile
    - cd dashbase-firehose-nsq && mvn compile
    - cd dashbase-firehose-syslog && mvn compile

# Cache the resolution-cache and build streams to speed things up
  cache_directories:
    - "target/resolution-cache"
    - "target/streams"
    - "project/target/resolution-cache"
    - "project/target/streams"
    - "~/.m2"

test:
  # Run this bash command instead of CircleCI's inferred commands
  override:
    - cd dashbase-grafana && ./node_modules/grunt-cli/bin/grunt babel
    - cd dashbase-firehose-cloudwatch && mvn test
    - cd dashbase-firehose-kafka_10 && mvn test
    - cd dashbase-firehose-nsq && mvn test
    - cd dashbase-firehose-syslog && mvn test

  # Run these commands after the "override" commands
  post:
    # Copy test reports to Circle test reports dir
    - mkdir -p $CIRCLE_TEST_REPORTS/junit/
    - find . -type f -regex ".*/target/test-reports/.*xml" -exec cp {} $CIRCLE_TEST_REPORTS/junit/ \;

deployment:
  master:
    branch: master
    commands:
      - cd dashbase-grafana && ./node_modules/grunt-cli/bin/grunt compress
      - aws s3 cp dashbase-grafana/target/dashbase-grafana-app-0.0.1.tar.gz s3://dashbase-builds/master/
      # Update Grafana server on staging
      - ssh ec2-user@${DEMO_ADDR} "sudo aws s3 cp s3://dashbase-builds/master/dashbase-grafana-app-$VERSION.tar.gz /home/ec2-user/dashbase-grafana.tar.gz"
      - ssh ec2-user@${DEMO_ADDR} "bash -s" < ./deploy/update_grafana.sh
  eero:
    branch: eero-deploy
    commands:
      - cd dashbase-grafana && ./node_modules/grunt-cli/bin/grunt compress
      - scp dashbase-grafana/target/dashbase-grafana-app-0.0.1.tar.gz ec2-user@${EERO_ADDR}:/home/ec2-user/dashbase-grafana.tar.gz
      - ssh ec2-user@${EERO_ADDR} "bash -s" < ./deploy/update_grafana.sh
